{
  "info": {
    "name": "Mock Shop API Tests",
    "description": "Comprehensive API testing collection for the Mock Shop e-commerce application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running test for: ' + pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "sessionToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminSessionToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testProductId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testOrderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testCartItemId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "User Signup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user).to.have.property('id');",
                  "    pm.expect(responseJson.user).to.have.property('email');",
                  "    pm.expect(responseJson.user.role).to.eql('CUSTOMER');",
                  "    ",
                  "    // Store user ID for later tests",
                  "    pm.collectionVariables.set('testUserId', responseJson.user.id);",
                  "});",
                  "",
                  "pm.test('Email validation works', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test.user@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "Admin User Signup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Admin user created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user.email).to.eql('admin@example.com');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "Invalid Signup - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"email\": \"incomplete@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "Duplicate Email Signup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 409', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
                  "});",
                  "",
                  "pm.test('Error indicates duplicate email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Duplicate\",\n  \"lastName\": \"User\",\n  \"email\": \"test.user@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        }
      ]
    },
    {
      "name": "Product Tests",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains products array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('products');",
                  "    pm.expect(responseJson.products).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Products have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.products.length > 0) {",
                  "        const product = responseJson.products[0];",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('name');",
                  "        pm.expect(product).to.have.property('price');",
                  "        pm.expect(product).to.have.property('stockQuantity');",
                  "        ",
                  "        // Store first product ID for later tests",
                  "        pm.collectionVariables.set('testProductId', product.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Get Products with Category Filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filtered products returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('products');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?category=electronics",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "category",
                  "value": "electronics"
                }
              ]
            }
          }
        },
        {
          "name": "Get Products with Price Filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Products within price range', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.products.length > 0) {",
                  "        responseJson.products.forEach(product => {",
                  "            pm.expect(product.price).to.be.at.least(10);",
                  "            pm.expect(product.price).to.be.at.most(100);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?minPrice=10&maxPrice=100",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "10"
                },
                {
                  "key": "maxPrice",
                  "value": "100"
                }
              ]
            }
          }
        },
        {
          "name": "Search Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain query term', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.products.length > 0) {",
                  "        const searchTerm = 'laptop';",
                  "        responseJson.products.forEach(product => {",
                  "            const containsSearchTerm = ",
                  "                product.name.toLowerCase().includes(searchTerm) ||",
                  "                (product.description && product.description.toLowerCase().includes(searchTerm));",
                  "            pm.expect(containsSearchTerm).to.be.true;",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?search=laptop",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "search",
                  "value": "laptop"
                }
              ]
            }
          }
        },
        {
          "name": "Get Single Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product details returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('product');",
                  "    pm.expect(responseJson.product).to.have.property('id');",
                  "    pm.expect(responseJson.product).to.have.property('name');",
                  "    pm.expect(responseJson.product).to.have.property('description');",
                  "    pm.expect(responseJson.product).to.have.property('price');",
                  "});",
                  "",
                  "pm.test('Product includes reviews', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.product).to.have.property('reviews');",
                  "    pm.expect(responseJson.product.reviews).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{testProductId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{testProductId}}"]
            }
          }
        },
        {
          "name": "Get Non-existent Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/non-existent-id",
              "host": ["{{baseUrl}}"],
              "path": ["products", "non-existent-id"]
            }
          }
        }
      ]
    },
    {
      "name": "Cart Tests",
      "item": [
        {
          "name": "Get Empty Cart (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/cart",
              "host": ["{{baseUrl}}"],
              "path": ["cart"]
            }
          }
        },
        {
          "name": "Add Item to Cart (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{testProductId}}\",\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/cart",
              "host": ["{{baseUrl}}"],
              "path": ["cart"]
            }
          }
        }
      ]
    },
    {
      "name": "User Profile Tests",
      "item": [
        {
          "name": "Get Profile (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user/profile",
              "host": ["{{baseUrl}}"],
              "path": ["user", "profile"]
            }
          }
        }
      ]
    },
    {
      "name": "Order Tests",
      "item": [
        {
          "name": "Get Orders (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        },
        {
          "name": "Create Order (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"{{testProductId}}\",\n      \"quantity\": 1,\n      \"price\": 29.99\n    }\n  ],\n  \"shippingAddress\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"123-456-7890\",\n    \"address\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"address\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"subtotal\": 29.99,\n  \"total\": 32.99\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          }
        }
      ]
    },
    {
      "name": "Admin Tests",
      "item": [
        {
          "name": "Get Admin Dashboard (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "dashboard"]
            }
          }
        },
        {
          "name": "Get Admin Products (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/products",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "products"]
            }
          }
        },
        {
          "name": "Create Product (Unauthenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for API testing\",\n  \"price\": 49.99,\n  \"categoryId\": \"category-id\",\n  \"stockQuantity\": 50,\n  \"images\": [\"/images/test-product.jpg\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/products",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "Data Validation Tests",
      "item": [
        {
          "name": "Invalid Product ID Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                  "});",
                  "",
                  "pm.test('Error message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/invalid-id-format-123!@#",
              "host": ["{{baseUrl}}"],
              "path": ["products", "invalid-id-format-123!@#"]
            }
          }
        },
        {
          "name": "Invalid JSON in Request Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('JSON parse error handled', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ invalid json syntax here }"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "SQL Injection Attempt",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is not 500', function () {",
                  "    pm.expect(pm.response.code).to.not.equal(500);",
                  "});",
                  "",
                  "pm.test('No database error exposed', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.not.include('sql');",
                  "    pm.expect(responseText.toLowerCase()).to.not.include('database');",
                  "    pm.expect(responseText.toLowerCase()).to.not.include('sqlite');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?search=' OR '1'='1",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "search",
                  "value": "' OR '1'='1"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Load Test - Multiple Product Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time under 2 seconds', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    pm.expect(pm.response.responseSize).to.be.below(1000000); // 1MB",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Large Search Query",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles large search query', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Response time reasonable for large query', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?search={{longSearchQuery}}",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "search",
                  "value": "{{longSearchQuery}}"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}