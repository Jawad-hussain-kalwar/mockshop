// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  cart      Cart?
  wishlist  Wishlist[]

  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
}

// Product Model
model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  categoryId    String?
  stockQuantity Int      @default(0)
  images        String   // JSON string array of image paths
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  wishlist   Wishlist[]

  @@map("products")
}

// Category Model
model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  parentId    String?
  slug        String  @unique
  isActive    Boolean @default(true)

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Order Model
model Order {
  id              String      @id @default(cuid())
  userId          String?
  status          OrderStatus @default(PENDING)
  subtotal        Float
  discountAmount  Float       @default(0)
  total           Float
  shippingAddress String      // JSON string
  billingAddress  String      // JSON string
  paymentMethod   String
  discountCode    String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Cart Model
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Review Model
model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int      // 1-5
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("reviews")
}

// Discount Code Model
model DiscountCode {
  id             String          @id @default(cuid())
  code           String          @unique
  type           DiscountType
  value          Float
  minOrderAmount Float?
  maxUses        Int?
  currentUses    Int             @default(0)
  expiresAt      DateTime?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())

  @@map("discount_codes")
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

// Wishlist Model
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

// Shop Settings (singleton)
model ShopSettings {
  id                   String   @id @default(cuid())
  shopName             String
  shopDescription      String?
  contactEmail         String?
  contactPhone         String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  country              String?
  currency             String   @default("USD")
  taxRate              Float    @default(10)
  freeShippingThreshold Float   @default(100)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("shop_settings")
}
